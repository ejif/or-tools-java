/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

/**
 *  The class Iterator has two direct subclasses. HoleIterators iterates over all holes, that is value removed between the current min and max of the variable since the last time the variable was processed in the queue. DomainIterators iterates over all elements of the variable domain. Both iterators are not robust to domain changes. Hole iterators can also report values outside the current min and max of the variable. HoleIterators should only be called from a demon attached to the variable that has created this iterator. IntVar* current_var; std::unique_ptr&lt;IntVarIterator&gt; it(current_var-&gt;MakeHoleIterator(false)); for (const int64 hole : InitAndGetValues(it)) {   /// use the hole }
 */
public class IntVarIterator extends BaseObject {
  private transient long swigCPtr;

  protected IntVarIterator(long cPtr, boolean cMemoryOwn) {
    super(mainJNI.IntVarIterator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IntVarIterator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mainJNI.delete_IntVarIterator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  /**
   *  This method must be called before each loop.
   */
  public void init() {
    mainJNI.IntVarIterator_init(swigCPtr, this);
  }

  /**
   *  This method indicates if we can call Value() or not.
   */
  public boolean ok() {
    return mainJNI.IntVarIterator_ok(swigCPtr, this);
  }

  /**
   *  This method returns the current value of the iterator.
   */
  public long value() {
    return mainJNI.IntVarIterator_value(swigCPtr, this);
  }

  /**
   *  This method moves the iterator to the next value.
   */
  public void next() {
    mainJNI.IntVarIterator_next(swigCPtr, this);
  }

  /**
   *  Pretty Print.
   */
  public String toString() {
    return mainJNI.IntVarIterator_toString(swigCPtr, this);
  }

}
