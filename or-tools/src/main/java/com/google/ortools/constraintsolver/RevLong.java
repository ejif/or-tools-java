/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

/**
 *  This class adds reversibility to a POD type. It contains the stamp optimization. i.e. the SaveValue call is done only once per node of the search tree.  Please note that actual stamps always starts at 1, thus an initial value of 0 will always trigger the first SaveValue.
 */
public class RevLong {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RevLong(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RevLong obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mainJNI.delete_RevLong(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RevLong(long val) {
    this(mainJNI.new_RevLong(val), true);
  }

  public long value() {
    return mainJNI.RevLong_value(swigCPtr, this);
  }

  public void setValue(Solver s, long val) {
    mainJNI.RevLong_setValue(swigCPtr, this, Solver.getCPtr(s), s, val);
  }

}
