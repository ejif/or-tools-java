/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

/**
 *  This struct holds all parameters for the default search. DefaultPhaseParameters is only used by Solver::MakeDefaultPhase methods. Note this is for advanced users only.
 */
public class DefaultPhaseParameters {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DefaultPhaseParameters(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DefaultPhaseParameters obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mainJNI.delete_DefaultPhaseParameters(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  /**
   *  This parameter describes how the next variable to instantiate will be chosen.
   */
  public void setVar_selection_schema(int value) {
    mainJNI.DefaultPhaseParameters_var_selection_schema_set(swigCPtr, this, value);
  }

  /**
   *  This parameter describes how the next variable to instantiate will be chosen.
   */
  public int getVar_selection_schema() {
    return mainJNI.DefaultPhaseParameters_var_selection_schema_get(swigCPtr, this);
  }

  /**
   *  This parameter describes which value to select for a given var.
   */
  public void setValue_selection_schema(int value) {
    mainJNI.DefaultPhaseParameters_value_selection_schema_set(swigCPtr, this, value);
  }

  /**
   *  This parameter describes which value to select for a given var.
   */
  public int getValue_selection_schema() {
    return mainJNI.DefaultPhaseParameters_value_selection_schema_get(swigCPtr, this);
  }

  /**
   *  Maximum number of intervals that the initialization of impacts will scan per variable.
   */
  public void setInitialization_splits(int value) {
    mainJNI.DefaultPhaseParameters_initialization_splits_set(swigCPtr, this, value);
  }

  /**
   *  Maximum number of intervals that the initialization of impacts will scan per variable.
   */
  public int getInitialization_splits() {
    return mainJNI.DefaultPhaseParameters_initialization_splits_get(swigCPtr, this);
  }

  /**
   *  The default phase will run heuristics periodically. This parameter indicates if we should run all heuristics, or a randomly selected one.
   */
  public void setRun_all_heuristics(boolean value) {
    mainJNI.DefaultPhaseParameters_run_all_heuristics_set(swigCPtr, this, value);
  }

  /**
   *  The default phase will run heuristics periodically. This parameter indicates if we should run all heuristics, or a randomly selected one.
   */
  public boolean getRun_all_heuristics() {
    return mainJNI.DefaultPhaseParameters_run_all_heuristics_get(swigCPtr, this);
  }

  /**
   *  The distance in nodes between each run of the heuristics. A negative or null value will mean that we will not run heuristics at all.
   */
  public void setHeuristic_period(int value) {
    mainJNI.DefaultPhaseParameters_heuristic_period_set(swigCPtr, this, value);
  }

  /**
   *  The distance in nodes between each run of the heuristics. A negative or null value will mean that we will not run heuristics at all.
   */
  public int getHeuristic_period() {
    return mainJNI.DefaultPhaseParameters_heuristic_period_get(swigCPtr, this);
  }

  /**
   *  The failure limit for each heuristic that we run.
   */
  public void setHeuristic_num_failures_limit(int value) {
    mainJNI.DefaultPhaseParameters_heuristic_num_failures_limit_set(swigCPtr, this, value);
  }

  /**
   *  The failure limit for each heuristic that we run.
   */
  public int getHeuristic_num_failures_limit() {
    return mainJNI.DefaultPhaseParameters_heuristic_num_failures_limit_get(swigCPtr, this);
  }

  /**
   *  Whether to keep the impact from the first search for other searches, or to recompute the impact for each new search.
   */
  public void setPersistent_impact(boolean value) {
    mainJNI.DefaultPhaseParameters_persistent_impact_set(swigCPtr, this, value);
  }

  /**
   *  Whether to keep the impact from the first search for other searches, or to recompute the impact for each new search.
   */
  public boolean getPersistent_impact() {
    return mainJNI.DefaultPhaseParameters_persistent_impact_get(swigCPtr, this);
  }

  /**
   *  Seed used to initialize the random part in some heuristics.
   */
  public void setRandom_seed(int value) {
    mainJNI.DefaultPhaseParameters_random_seed_set(swigCPtr, this, value);
  }

  /**
   *  Seed used to initialize the random part in some heuristics.
   */
  public int getRandom_seed() {
    return mainJNI.DefaultPhaseParameters_random_seed_get(swigCPtr, this);
  }

  /**
   *  This represents the amount of information displayed by the default search. NONE means no display, VERBOSE means extra information.
   */
  public void setDisplay_level(int value) {
    mainJNI.DefaultPhaseParameters_display_level_set(swigCPtr, this, value);
  }

  /**
   *  This represents the amount of information displayed by the default search. NONE means no display, VERBOSE means extra information.
   */
  public int getDisplay_level() {
    return mainJNI.DefaultPhaseParameters_display_level_get(swigCPtr, this);
  }

  /**
   *  Should we use last conflict method. The default is false.
   */
  public void setUse_last_conflict(boolean value) {
    mainJNI.DefaultPhaseParameters_use_last_conflict_set(swigCPtr, this, value);
  }

  /**
   *  Should we use last conflict method. The default is false.
   */
  public boolean getUse_last_conflict() {
    return mainJNI.DefaultPhaseParameters_use_last_conflict_get(swigCPtr, this);
  }

  /**
   *  When defined, this overrides the default impact based decision builder.
   */
  public void setDecision_builder(DecisionBuilder value) {
    mainJNI.DefaultPhaseParameters_decision_builder_set(swigCPtr, this, DecisionBuilder.getCPtr(value), value);
  }

  /**
   *  When defined, this overrides the default impact based decision builder.
   */
  public DecisionBuilder getDecision_builder() {
    long cPtr = mainJNI.DefaultPhaseParameters_decision_builder_get(swigCPtr, this);
    return (cPtr == 0) ? null : new DecisionBuilder(cPtr, false);
  }

  public DefaultPhaseParameters() {
    this(mainJNI.new_DefaultPhaseParameters(), true);
  }

  // VariableSelection 
  public final static int CHOOSE_MAX_SUM_IMPACT = mainJNI.DefaultPhaseParameters_CHOOSE_MAX_SUM_IMPACT_get();
  public final static int CHOOSE_MAX_AVERAGE_IMPACT = mainJNI.DefaultPhaseParameters_CHOOSE_MAX_AVERAGE_IMPACT_get();
  public final static int CHOOSE_MAX_VALUE_IMPACT = mainJNI.DefaultPhaseParameters_CHOOSE_MAX_VALUE_IMPACT_get();

  // ValueSelection 
  public final static int SELECT_MIN_IMPACT = mainJNI.DefaultPhaseParameters_SELECT_MIN_IMPACT_get();
  public final static int SELECT_MAX_IMPACT = mainJNI.DefaultPhaseParameters_SELECT_MAX_IMPACT_get();

  // DisplayLevel 
  public final static int NONE = mainJNI.DefaultPhaseParameters_NONE_get();
  public final static int NORMAL = mainJNI.DefaultPhaseParameters_NORMAL_get();
  public final static int VERBOSE = mainJNI.DefaultPhaseParameters_VERBOSE_get();

}
