// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/sat_parameters.proto

package com.google.ortools.sat;

public final class SatParametersOuterClass {
  private SatParametersOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_operations_research_sat_SatParameters_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_operations_research_sat_SatParameters_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n ortools/sat/sat_parameters.proto\022\027oper" +
      "ations_research.sat\"\3307\n\rSatParameters\022`\n" +
      "\030preferred_variable_order\030\001 \001(\01624.operat" +
      "ions_research.sat.SatParameters.Variable" +
      "Order:\010IN_ORDER\022Y\n\020initial_polarity\030\002 \001(" +
      "\0162/.operations_research.sat.SatParameter" +
      "s.Polarity:\016POLARITY_FALSE\022\036\n\020use_phase_" +
      "saving\030, \001(\010:\004true\022 \n\025random_polarity_ra" +
      "tio\030- \001(\001:\0010\022 \n\025random_branches_ratio\030  " +
      "\001(\001:\0010\022!\n\022use_erwa_heuristic\030K \001(\010:\005fals" +
      "e\022%\n\032initial_variables_activity\030L \001(\001:\0010" +
      "\0226\n\'also_bump_variables_in_conflict_reas" +
      "ons\030M \001(\010:\005false\022o\n\026minimization_algorit" +
      "hm\030\004 \001(\0162D.operations_research.sat.SatPa" +
      "rameters.ConflictMinimizationAlgorithm:\t" +
      "RECURSIVE\022\202\001\n\035binary_minimization_algori" +
      "thm\030\" \001(\0162@.operations_research.sat.SatP" +
      "arameters.BinaryMinizationAlgorithm:\031BIN" +
      "ARY_MINIMIZATION_FIRST\0222\n$subsumption_du" +
      "ring_conflict_analysis\0308 \001(\010:\004true\022$\n\025cl" +
      "ause_cleanup_period\030\013 \001(\005:\00510000\022$\n\025clau" +
      "se_cleanup_target\030\r \001(\005:\00510000\022k\n\031clause" +
      "_cleanup_protection\030: \001(\01627.operations_r" +
      "esearch.sat.SatParameters.ClauseProtecti" +
      "on:\017PROTECTION_NONE\022#\n\030clause_cleanup_lb" +
      "d_bound\030; \001(\005:\0015\022g\n\027clause_cleanup_order" +
      "ing\030< \001(\01625.operations_research.sat.SatP" +
      "arameters.ClauseOrdering:\017CLAUSE_ACTIVIT" +
      "Y\022!\n\024pb_cleanup_increment\030. \001(\005:\003200\022\035\n\020" +
      "pb_cleanup_ratio\030/ \001(\001:\0030.5\0224\n(minimize_" +
      "with_propagation_restart_period\030` \001(\005:\0021" +
      "0\0225\n\'minimize_with_propagation_num_decis" +
      "ions\030a \001(\005:\0041000\022$\n\027variable_activity_de" +
      "cay\030\017 \001(\001:\0030.8\022+\n\033max_variable_activity_" +
      "value\030\020 \001(\001:\0061e+100\022\037\n\021glucose_max_decay" +
      "\030\026 \001(\001:\0040.95\022%\n\027glucose_decay_increment\030" +
      "\027 \001(\001:\0040.01\022,\n\036glucose_decay_increment_p" +
      "eriod\030\030 \001(\005:\0045000\022$\n\025clause_activity_dec" +
      "ay\030\021 \001(\001:\0050.999\022(\n\031max_clause_activity_v" +
      "alue\030\022 \001(\001:\0051e+20\022S\n\022restart_algorithms\030" +
      "= \003(\01627.operations_research.sat.SatParam" +
      "eters.RestartAlgorithm\022e\n\032default_restar" +
      "t_algorithms\030F \001(\t:ALUBY_RESTART,LBD_MOV" +
      "ING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RE" +
      "START\022\032\n\016restart_period\030\036 \001(\005:\00250\022\'\n\033res" +
      "tart_running_window_size\030> \001(\005:\00250\022#\n\030re" +
      "start_dl_average_ratio\030? \001(\001:\0011\022$\n\031resta" +
      "rt_lbd_average_ratio\030G \001(\001:\0011\022#\n\024use_blo" +
      "cking_restart\030@ \001(\010:\005false\022*\n\034blocking_r" +
      "estart_window_size\030A \001(\005:\0045000\022(\n\033blocki" +
      "ng_restart_multiplier\030B \001(\001:\0031.4\0220\n%num_" +
      "conflicts_before_strategy_changes\030D \001(\005:" +
      "\0010\022)\n\036strategy_change_increase_ratio\030E \001" +
      "(\001:\0010\022 \n\023max_time_in_seconds\030$ \001(\001:\003inf\022" +
      "#\n\026max_deterministic_time\030C \001(\001:\003inf\0224\n\027" +
      "max_number_of_conflicts\030% \001(\003:\023922337203" +
      "6854775807\022\037\n\020max_memory_in_mb\030( \001(\003:\00510" +
      "000\022-\n\037treat_binary_clauses_separately\030!" +
      " \001(\010:\004true\022\026\n\013random_seed\030\037 \001(\005:\0011\022\"\n\023lo" +
      "g_search_progress\030) \001(\010:\005false\022 \n\021use_pb" +
      "_resolution\030+ \001(\010:\005false\0226\n\'minimize_red" +
      "uction_during_pb_resolution\0300 \001(\010:\005false" +
      "\022,\n\036count_assumption_levels_in_lbd\0301 \001(\010" +
      ":\004true\022#\n\026presolve_bve_threshold\0306 \001(\005:\003" +
      "500\022%\n\032presolve_bve_clause_weight\0307 \001(\005:" +
      "\0013\0225\n)presolve_probing_deterministic_tim" +
      "e_limit\0309 \001(\001:\00230\022%\n\027presolve_blocked_cl" +
      "ause\030X \001(\010:\004true\022\036\n\020presolve_use_bva\030H \001" +
      "(\010:\004true\022!\n\026presolve_bva_threshold\030I \001(\005" +
      ":\0011\022#\n\027max_presolve_iterations\030\212\001 \001(\005:\0013" +
      "\022\037\n\021cp_model_presolve\030V \001(\010:\004true\0220\n$cp_" +
      "model_max_num_presolve_operations\030\227\001 \001(\005" +
      ":\0010\022!\n\026cp_model_probing_level\030n \001(\005:\0012\022\'" +
      "\n\031cp_model_use_sat_presolve\030] \001(\010:\004true\022" +
      ")\n\032expand_element_constraints\030\214\001 \001(\010:\004tr" +
      "ue\022+\n\034expand_automaton_constraints\030\217\001 \001(" +
      "\010:\004true\0223\n\033merge_no_overlap_work_limit\030\221" +
      "\001 \001(\001:\r1000000000000\0220\n\034merge_at_most_on" +
      "e_work_limit\030\222\001 \001(\001:\t100000000\022\'\n\033presol" +
      "ve_substitution_level\030\223\001 \001(\005:\0011\022$\n\026use_o" +
      "ptimization_hints\030# \001(\010:\004true\022\033\n\rminimiz" +
      "e_core\0302 \001(\010:\004true\022!\n\023find_multiple_core" +
      "s\030T \001(\010:\004true\022 \n\022cover_optimization\030Y \001(" +
      "\010:\004true\022x\n\030max_sat_assumption_order\0303 \001(" +
      "\0162<.operations_research.sat.SatParameter" +
      "s.MaxSatAssumptionOrder:\030DEFAULT_ASSUMPT" +
      "ION_ORDER\022/\n max_sat_reverse_assumption_" +
      "order\0304 \001(\010:\005false\022|\n\026max_sat_stratifica" +
      "tion\0305 \001(\0162D.operations_research.sat.Sat" +
      "Parameters.MaxSatStratificationAlgorithm" +
      ":\026STRATIFICATION_DESCENT\0227\n)use_preceden" +
      "ces_in_disjunctive_constraint\030J \001(\010:\004tru" +
      "e\022<\n-use_overload_checker_in_cumulative_" +
      "constraint\030N \001(\010:\005false\022B\n3use_timetable" +
      "_edge_finding_in_cumulative_constraint\030O" +
      " \001(\010:\005false\022A\n3use_disjunctive_constrain" +
      "t_in_cumulative_constraint\030P \001(\010:\004true\022\036" +
      "\n\023linearization_level\030Z \001(\005:\0011\022!\n\026boolea" +
      "n_encoding_level\030k \001(\005:\0011\022\033\n\014max_num_cut" +
      "s\030[ \001(\005:\00510000\022*\n\033only_add_cuts_at_level" +
      "_zero\030\\ \001(\010:\005false\022 \n\021add_knapsack_cuts\030" +
      "o \001(\010:\005false\022\031\n\013add_cg_cuts\030u \001(\010:\004true\022" +
      "\032\n\014add_mir_cuts\030x \001(\010:\004true\022!\n\025max_all_d" +
      "iff_cut_size\030\224\001 \001(\005:\0017\022)\n\034max_integer_ro" +
      "unding_scaling\030w \001(\005:\003600\022\'\n\031add_lp_cons" +
      "traints_lazily\030p \001(\010:\004true\022/\n$min_orthog" +
      "onality_for_lp_constraints\030s \001(\001:\0010\022+\n\036m" +
      "ax_consecutive_inactive_count\030y \001(\005:\003100" +
      "\022&\n\032new_constraints_batch_size\030z \001(\005:\00250" +
      "\022b\n\020search_branching\030R \001(\01626.operations_" +
      "research.sat.SatParameters.SearchBranchi" +
      "ng:\020AUTOMATIC_SEARCH\022)\n\033exploit_integer_" +
      "lp_solution\030^ \001(\010:\004true\022%\n\027exploit_all_l" +
      "p_solution\030t \001(\010:\004true\022%\n\025exploit_best_s" +
      "olution\030\202\001 \001(\010:\005false\022 \n\021exploit_objecti" +
      "ve\030\203\001 \001(\010:\004true\022\"\n\026probing_period_at_roo" +
      "t\030\216\001 \001(\003:\0010\022.\n!pseudo_cost_reliability_t" +
      "hreshold\030{ \001(\003:\003100\022!\n\022optimize_with_cor" +
      "e\030S \001(\010:\005false\022\'\n\033binary_search_num_conf" +
      "licts\030c \001(\005:\002-1\022#\n\024optimize_with_max_hs\030" +
      "U \001(\010:\005false\022&\n\027enumerate_all_solutions\030" +
      "W \001(\010:\005false\0222\n\"fill_tightened_domains_i" +
      "n_response\030\204\001 \001(\010:\005false\022\'\n\031instantiate_" +
      "all_variables\030j \001(\010:\004true\0226\n(auto_detect" +
      "_greater_than_at_least_one_of\030_ \001(\010:\004tru" +
      "e\022(\n\031stop_after_first_solution\030b \001(\010:\005fa" +
      "lse\022#\n\023stop_after_presolve\030\225\001 \001(\010:\005false" +
      "\022\035\n\022num_search_workers\030d \001(\005:\0011\022!\n\021inter" +
      "leave_search\030\210\001 \001(\010:\005false\0225\n&reduce_mem" +
      "ory_usage_in_interleave_mode\030\215\001 \001(\010:\004tru" +
      "e\022-\n\035deterministic_parallel_search\030\206\001 \001(" +
      "\010:\005false\022$\n\026share_objective_bounds\030q \001(\010" +
      ":\004true\022%\n\027share_level_zero_bounds\030r \001(\010:" +
      "\004true\022\033\n\014use_lns_only\030e \001(\010:\005false\022.\n\037ln" +
      "s_focus_on_decision_variables\030i \001(\010:\005fal" +
      "se\022\033\n\014use_rins_lns\030\201\001 \001(\010:\004true\022\"\n\022use_r" +
      "elaxation_lns\030\226\001 \001(\010:\005false\022$\n\024diversify" +
      "_lns_params\030\211\001 \001(\010:\005false\022\037\n\020randomize_s" +
      "earch\030g \001(\010:\005false\022)\n\036search_randomizati" +
      "on_tolerance\030h \001(\003:\0010\022$\n\026use_optional_va" +
      "riables\030l \001(\010:\004true\022!\n\023use_exact_lp_reas" +
      "on\030m \001(\010:\004true\022#\n\023use_branching_in_lp\030\213\001" +
      " \001(\010:\005false\022\'\n\027use_combined_no_overlap\030\205" +
      "\001 \001(\010:\005false\022\"\n\023catch_sigint_signal\030\207\001 \001" +
      "(\010:\004true\022!\n\022use_implied_bounds\030\220\001 \001(\010:\004t" +
      "rue\022\037\n\rmip_max_bound\030| \001(\001:\01010000000\022\032\n\017" +
      "mip_var_scaling\030} \001(\001:\0011\022#\n\024mip_wanted_p" +
      "recision\030~ \001(\001:\0051e-06\022%\n\031mip_max_activit" +
      "y_exponent\030\177 \001(\005:\00253\022$\n\023mip_check_precis" +
      "ion\030\200\001 \001(\001:\0060.0001\"H\n\rVariableOrder\022\014\n\010I" +
      "N_ORDER\020\000\022\024\n\020IN_REVERSE_ORDER\020\001\022\023\n\017IN_RA" +
      "NDOM_ORDER\020\002\"\206\001\n\010Polarity\022\021\n\rPOLARITY_TR" +
      "UE\020\000\022\022\n\016POLARITY_FALSE\020\001\022\023\n\017POLARITY_RAN" +
      "DOM\020\002\022\032\n\026POLARITY_WEIGHTED_SIGN\020\003\022\"\n\036POL" +
      "ARITY_REVERSE_WEIGHTED_SIGN\020\004\"V\n\035Conflic" +
      "tMinimizationAlgorithm\022\010\n\004NONE\020\000\022\n\n\006SIMP" +
      "LE\020\001\022\r\n\tRECURSIVE\020\002\022\020\n\014EXPERIMENTAL\020\003\"\340\001" +
      "\n\031BinaryMinizationAlgorithm\022\032\n\026NO_BINARY" +
      "_MINIMIZATION\020\000\022\035\n\031BINARY_MINIMIZATION_F" +
      "IRST\020\001\0227\n3BINARY_MINIMIZATION_FIRST_WITH" +
      "_TRANSITIVE_REDUCTION\020\004\022)\n%BINARY_MINIMI" +
      "ZATION_WITH_REACHABILITY\020\002\022$\n EXPERIMENT" +
      "AL_BINARY_MINIMIZATION\020\003\"R\n\020ClauseProtec" +
      "tion\022\023\n\017PROTECTION_NONE\020\000\022\025\n\021PROTECTION_" +
      "ALWAYS\020\001\022\022\n\016PROTECTION_LBD\020\002\"5\n\016ClauseOr" +
      "dering\022\023\n\017CLAUSE_ACTIVITY\020\000\022\016\n\nCLAUSE_LB" +
      "D\020\001\"\206\001\n\020RestartAlgorithm\022\016\n\nNO_RESTART\020\000" +
      "\022\020\n\014LUBY_RESTART\020\001\022\035\n\031DL_MOVING_AVERAGE_" +
      "RESTART\020\002\022\036\n\032LBD_MOVING_AVERAGE_RESTART\020" +
      "\003\022\021\n\rFIXED_RESTART\020\004\"t\n\025MaxSatAssumption" +
      "Order\022\034\n\030DEFAULT_ASSUMPTION_ORDER\020\000\022\035\n\031O" +
      "RDER_ASSUMPTION_BY_DEPTH\020\001\022\036\n\032ORDER_ASSU" +
      "MPTION_BY_WEIGHT\020\002\"o\n\035MaxSatStratificati" +
      "onAlgorithm\022\027\n\023STRATIFICATION_NONE\020\000\022\032\n\026" +
      "STRATIFICATION_DESCENT\020\001\022\031\n\025STRATIFICATI" +
      "ON_ASCENT\020\002\"\260\001\n\017SearchBranching\022\024\n\020AUTOM" +
      "ATIC_SEARCH\020\000\022\020\n\014FIXED_SEARCH\020\001\022\024\n\020PORTF" +
      "OLIO_SEARCH\020\002\022\r\n\tLP_SEARCH\020\003\022\026\n\022PSEUDO_C" +
      "OST_SEARCH\020\004\022\'\n#PORTFOLIO_WITH_QUICK_RES" +
      "TART_SEARCH\020\005\022\017\n\013HINT_SEARCH\020\006B\032\n\026com.go" +
      "ogle.ortools.satP\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_operations_research_sat_SatParameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_operations_research_sat_SatParameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_operations_research_sat_SatParameters_descriptor,
        new java.lang.String[] { "PreferredVariableOrder", "InitialPolarity", "UsePhaseSaving", "RandomPolarityRatio", "RandomBranchesRatio", "UseErwaHeuristic", "InitialVariablesActivity", "AlsoBumpVariablesInConflictReasons", "MinimizationAlgorithm", "BinaryMinimizationAlgorithm", "SubsumptionDuringConflictAnalysis", "ClauseCleanupPeriod", "ClauseCleanupTarget", "ClauseCleanupProtection", "ClauseCleanupLbdBound", "ClauseCleanupOrdering", "PbCleanupIncrement", "PbCleanupRatio", "MinimizeWithPropagationRestartPeriod", "MinimizeWithPropagationNumDecisions", "VariableActivityDecay", "MaxVariableActivityValue", "GlucoseMaxDecay", "GlucoseDecayIncrement", "GlucoseDecayIncrementPeriod", "ClauseActivityDecay", "MaxClauseActivityValue", "RestartAlgorithms", "DefaultRestartAlgorithms", "RestartPeriod", "RestartRunningWindowSize", "RestartDlAverageRatio", "RestartLbdAverageRatio", "UseBlockingRestart", "BlockingRestartWindowSize", "BlockingRestartMultiplier", "NumConflictsBeforeStrategyChanges", "StrategyChangeIncreaseRatio", "MaxTimeInSeconds", "MaxDeterministicTime", "MaxNumberOfConflicts", "MaxMemoryInMb", "TreatBinaryClausesSeparately", "RandomSeed", "LogSearchProgress", "UsePbResolution", "MinimizeReductionDuringPbResolution", "CountAssumptionLevelsInLbd", "PresolveBveThreshold", "PresolveBveClauseWeight", "PresolveProbingDeterministicTimeLimit", "PresolveBlockedClause", "PresolveUseBva", "PresolveBvaThreshold", "MaxPresolveIterations", "CpModelPresolve", "CpModelMaxNumPresolveOperations", "CpModelProbingLevel", "CpModelUseSatPresolve", "ExpandElementConstraints", "ExpandAutomatonConstraints", "MergeNoOverlapWorkLimit", "MergeAtMostOneWorkLimit", "PresolveSubstitutionLevel", "UseOptimizationHints", "MinimizeCore", "FindMultipleCores", "CoverOptimization", "MaxSatAssumptionOrder", "MaxSatReverseAssumptionOrder", "MaxSatStratification", "UsePrecedencesInDisjunctiveConstraint", "UseOverloadCheckerInCumulativeConstraint", "UseTimetableEdgeFindingInCumulativeConstraint", "UseDisjunctiveConstraintInCumulativeConstraint", "LinearizationLevel", "BooleanEncodingLevel", "MaxNumCuts", "OnlyAddCutsAtLevelZero", "AddKnapsackCuts", "AddCgCuts", "AddMirCuts", "MaxAllDiffCutSize", "MaxIntegerRoundingScaling", "AddLpConstraintsLazily", "MinOrthogonalityForLpConstraints", "MaxConsecutiveInactiveCount", "NewConstraintsBatchSize", "SearchBranching", "ExploitIntegerLpSolution", "ExploitAllLpSolution", "ExploitBestSolution", "ExploitObjective", "ProbingPeriodAtRoot", "PseudoCostReliabilityThreshold", "OptimizeWithCore", "BinarySearchNumConflicts", "OptimizeWithMaxHs", "EnumerateAllSolutions", "FillTightenedDomainsInResponse", "InstantiateAllVariables", "AutoDetectGreaterThanAtLeastOneOf", "StopAfterFirstSolution", "StopAfterPresolve", "NumSearchWorkers", "InterleaveSearch", "ReduceMemoryUsageInInterleaveMode", "DeterministicParallelSearch", "ShareObjectiveBounds", "ShareLevelZeroBounds", "UseLnsOnly", "LnsFocusOnDecisionVariables", "UseRinsLns", "UseRelaxationLns", "DiversifyLnsParams", "RandomizeSearch", "SearchRandomizationTolerance", "UseOptionalVariables", "UseExactLpReason", "UseBranchingInLp", "UseCombinedNoOverlap", "CatchSigintSignal", "UseImpliedBounds", "MipMaxBound", "MipVarScaling", "MipWantedPrecision", "MipMaxActivityExponent", "MipCheckPrecision", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
