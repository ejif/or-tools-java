/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

/**
 *  This class adds reversibility to a POD type. It contains the stamp optimization. i.e. the SaveValue call is done only once per node of the search tree.  Please note that actual stamps always starts at 1, thus an initial value of 0 will always trigger the first SaveValue.
 */
public class RevBool {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RevBool(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RevBool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mainJNI.delete_RevBool(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RevBool(boolean val) {
    this(mainJNI.new_RevBool(val), true);
  }

  public boolean value() {
    return mainJNI.RevBool_value(swigCPtr, this);
  }

  public void setValue(Solver s, boolean val) {
    mainJNI.RevBool_setValue(swigCPtr, this, Solver.getCPtr(s), s, val);
  }

}
