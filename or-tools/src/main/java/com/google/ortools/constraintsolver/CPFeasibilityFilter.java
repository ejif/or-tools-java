/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

/**
 *  This filter accepts deltas for which the assignment satisfies the constraints of the Solver. This is verified by keeping an internal copy of the assignment with all Next vars and their updated values, and calling RestoreAssignment() on the assignment+delta. exception of Next Vars (woud fail on large instances). WARNING: In the case of mandatory nodes, when all vehicles are currently being used in the solution but uninserted nodes still remain, this filter will reject the solution, even if the node could be inserted on one of these routes, because all Next vars of vehicle starts are already instantiated.
 */
public class CPFeasibilityFilter extends IntVarLocalSearchFilter {
  private transient long swigCPtr;

  protected CPFeasibilityFilter(long cPtr, boolean cMemoryOwn) {
    super(mainJNI.CPFeasibilityFilter_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CPFeasibilityFilter obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mainJNI.delete_CPFeasibilityFilter(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CPFeasibilityFilter(RoutingModel routing_model) {
    this(mainJNI.new_CPFeasibilityFilter(RoutingModel.getCPtr(routing_model), routing_model), true);
  }

  public String toString() {
    return mainJNI.CPFeasibilityFilter_toString(swigCPtr, this);
  }

  public boolean accept(Assignment delta, Assignment deltadelta, long objective_min, long objective_max) {
    return mainJNI.CPFeasibilityFilter_accept(swigCPtr, this, Assignment.getCPtr(delta), delta, Assignment.getCPtr(deltadelta), deltadelta, objective_min, objective_max);
  }

  public void onSynchronize(Assignment delta) {
    mainJNI.CPFeasibilityFilter_onSynchronize(swigCPtr, this, Assignment.getCPtr(delta), delta);
  }

}
